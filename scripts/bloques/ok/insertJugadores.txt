SQL> start insertJugadores
SQL> /*
SQL> Ingreso de jugadores a la table jugadores
SQL> */
SQL> set verify OFF
SQL> column nickname format a18;
SQL> column nombre format a18;
SQL> column apellido1 format a18;
SQL> column apellido2 format a18;
SQL> SET SERVEROUTPUT ON
SQL> DECLARE
  2  	     apodo jugadores.nickname%type;
  3  	     vnombre jugadores.nombre%type;
  4  	     apellido_1 jugadores.apellido1%type;
  5  	     apellido_2 jugadores.apellido2%type;
  6  	     registrado number;
  7  	     NULL_VALUE exception;
  8  	     pragma exception_init(null_value, -1400);
  9  	     --largo_texto exception;
 10  	     --pragma exception_init(largo_texto, -6502);
 11  BEGIN
 12  	     -- TODO: Mejorar veficando primero si existe el nickname
 13  	     -- captura de variables lexicas
 14  	     apodo := upper('&nickname');
 15  	     registrado := f_existe_nickname (apodo);
 16  	     if registrado = 0 then
 17  		     vnombre := upper('&nombre');
 18  		     apellido_1 := upper('&apellido1');
 19  		     apellido_2 := upper('&apellido2');
 20  		     -- se carga la informacion en la tabla jugadores
 21  		     insert into jugadores values (apodo,vnombre,apellido_1,apellido_2);
 22  		     -- encabezado de el texto de salida
 23  		     dbms_output.put_line(chr(13));
 24  		     dbms_output.put_line('La inforamcion se ha cargado satisfactoriamente, y se muestra a continuacion...');
 25  		     dbms_output.put_line(chr(13));
 26  		     dbms_output.put_line('Nickname	     Nombre	       Primer apellido	 Segundo apellido');
 27  		     dbms_output.put_line('_______________   _______________   _______________	 ________________');
 28  		     -- se crea un cursor para cargar la informacion ingresada a la tabla jugadores
 29  		     declare
 30  			     cursor jugadores is
 31  			     select
 32  			     nickname,
 33  			     nombre,
 34  			     apellido1,
 35  			     apellido2
 36  			     from jugadores
 37  			     where nickname = apodo;
 38  		     begin
 39  			     for jug in jugadores loop
 40  			     dbms_output.put_line(rpad(jug.nickname, 18, ' ')||rpad(jug.nombre, 18, ' ')||rpad(jug.apellido1, 18, ' ')||rpad(jug.apellido2, 19, ' '));
 41  			     end loop;
 42  		     end;
 43  	     else
 44  		     dbms_output.put_line(chr(13));
 45  		     dbms_output.put_line('El nickname que intenta ingresar ya existe, debe ingresar otro...');
 46  	     end if;
 47  EXCEPTION
 48  	     when VALUE_ERROR then
 49  		     dbms_output.put_line(chr(13));
 50  		     dbms_output.put_line('Excede el numero de caracteres permitidos');
 51  	     when dup_val_on_index then
 52  		     dbms_output.put_line(chr(13));
 53  		     DBMS_OUTPUT.PUT_LINE('Ya existe un jugador con ese nickname: por favor ingrese otro');
 54  	     when NULL_VALUE then
 55  		     dbms_output.put_line(chr(13));
 56  		     DBMS_OUTPUT.PUT_LINE('Solamente el segundo apellido puede ser nulo, por favor ingrese la informacion solicitada ');
 57  	     --when largo_texto then
 58  		     --dbms_output.put_line(chr(13));
 59  		     --DBMS_OUTPUT.PUT_LINE('El texto que intenta ingresar es muy largo, por favor ingrese uno mas corto.');
 60  	     when others then
 61  		     dbms_output.put_line(chr(13));
 62  		     DBMS_OUTPUT.PUT_LINE('Error de Oracle: '||SQLCODE||' - '||SQLERRM );
 63  END;
 64  /
Enter value for nickname: 
Enter value for nombre: 
Enter value for apellido1: 
Enter value for apellido2: 

                                                                                         
Solamente el segundo apellido puede ser nulo, por favor ingrese la informacion solicitada 

PL/SQL procedure successfully completed.

SQL> 
SQL> TODO. resolver el espacio
SP2-0734: unknown command beginning "TODO. reso..." - rest of line ignored.
SQL> start insertJugadores
SQL> /*
SQL> Ingreso de jugadores a la table jugadores
SQL> */
SQL> set verify OFF
SQL> column nickname format a18;
SQL> column nombre format a18;
SQL> column apellido1 format a18;
SQL> column apellido2 format a18;
SQL> SET SERVEROUTPUT ON
SQL> DECLARE
  2  	     apodo jugadores.nickname%type;
  3  	     vnombre jugadores.nombre%type;
  4  	     apellido_1 jugadores.apellido1%type;
  5  	     apellido_2 jugadores.apellido2%type;
  6  	     registrado number;
  7  	     NULL_VALUE exception;
  8  	     pragma exception_init(null_value, -1400);
  9  	     --largo_texto exception;
 10  	     --pragma exception_init(largo_texto, -6502);
 11  BEGIN
 12  	     -- TODO: Mejorar veficando primero si existe el nickname
 13  	     -- captura de variables lexicas
 14  	     apodo := upper('&nickname');
 15  	     registrado := f_existe_nickname (apodo);
 16  	     if registrado = 0 then
 17  		     vnombre := upper('&nombre');
 18  		     apellido_1 := upper('&apellido1');
 19  		     apellido_2 := upper('&apellido2');
 20  		     -- se carga la informacion en la tabla jugadores
 21  		     insert into jugadores values (apodo,vnombre,apellido_1,apellido_2);
 22  		     -- encabezado de el texto de salida
 23  		     dbms_output.put_line(chr(13));
 24  		     dbms_output.put_line('La inforamcion se ha cargado satisfactoriamente, y se muestra a continuacion...');
 25  		     dbms_output.put_line(chr(13));
 26  		     dbms_output.put_line('Nickname	     Nombre	       Primer apellido	 Segundo apellido');
 27  		     dbms_output.put_line('_______________   _______________   _______________	 ________________');
 28  		     -- se crea un cursor para cargar la informacion ingresada a la tabla jugadores
 29  		     declare
 30  			     cursor jugadores is
 31  			     select
 32  			     nickname,
 33  			     nombre,
 34  			     apellido1,
 35  			     apellido2
 36  			     from jugadores
 37  			     where nickname = apodo;
 38  		     begin
 39  			     for jug in jugadores loop
 40  			     dbms_output.put_line(rpad(jug.nickname, 18, ' ')||rpad(jug.nombre, 18, ' ')||rpad(jug.apellido1, 18, ' ')||rpad(jug.apellido2, 19, ' '));
 41  			     end loop;
 42  		     end;
 43  	     else
 44  		     dbms_output.put_line(chr(13));
 45  		     dbms_output.put_line('El nickname que intenta ingresar ya existe, debe ingresar otro...');
 46  	     end if;
 47  EXCEPTION
 48  	     when VALUE_ERROR then
 49  		     dbms_output.put_line(chr(13));
 50  		     dbms_output.put_line('Excede el numero de caracteres permitidos');
 51  	     when dup_val_on_index then
 52  		     dbms_output.put_line(chr(13));
 53  		     DBMS_OUTPUT.PUT_LINE('Ya existe un jugador con ese nickname: por favor ingrese otro');
 54  	     when NULL_VALUE then
 55  		     dbms_output.put_line(chr(13));
 56  		     DBMS_OUTPUT.PUT_LINE('Solamente el segundo apellido puede ser nulo, por favor ingrese la informacion solicitada ');
 57  	     --when largo_texto then
 58  		     --dbms_output.put_line(chr(13));
 59  		     --DBMS_OUTPUT.PUT_LINE('El texto que intenta ingresar es muy largo, por favor ingrese uno mas corto.');
 60  	     when others then
 61  		     dbms_output.put_line(chr(13));
 62  		     DBMS_OUTPUT.PUT_LINE('Error de Oracle: '||SQLCODE||' - '||SQLERRM );
 63  END;
 64  /
Enter value for nickname: mml
Enter value for nombre: fdf
Enter value for apellido1: dfd
Enter value for apellido2: 

                                                                                         
El nickname que intenta ingresar ya existe, debe ingresar otro...                         

PL/SQL procedure successfully completed.

SQL> 
SQL> TODO. resolver el espacio
SP2-0734: unknown command beginning "TODO. reso..." - rest of line ignored.
SQL> start insertJugadores
SQL> /*
SQL> Ingreso de jugadores a la table jugadores
SQL> */
SQL> set verify OFF
SQL> column nickname format a18;
SQL> column nombre format a18;
SQL> column apellido1 format a18;
SQL> column apellido2 format a18;
SQL> SET SERVEROUTPUT ON
SQL> DECLARE
  2  	     apodo jugadores.nickname%type;
  3  	     vnombre jugadores.nombre%type;
  4  	     apellido_1 jugadores.apellido1%type;
  5  	     apellido_2 jugadores.apellido2%type;
  6  	     registrado number;
  7  	     NULL_VALUE exception;
  8  	     pragma exception_init(null_value, -1400);
  9  	     --largo_texto exception;
 10  	     --pragma exception_init(largo_texto, -6502);
 11  BEGIN
 12  	     -- TODO: Mejorar veficando primero si existe el nickname
 13  	     -- captura de variables lexicas
 14  	     apodo := upper('&nickname');
 15  	     registrado := f_existe_nickname (apodo);
 16  	     if registrado = 0 then
 17  		     vnombre := upper('&nombre');
 18  		     apellido_1 := upper('&apellido1');
 19  		     apellido_2 := upper('&apellido2');
 20  		     -- se carga la informacion en la tabla jugadores
 21  		     insert into jugadores values (apodo,vnombre,apellido_1,apellido_2);
 22  		     -- encabezado de el texto de salida
 23  		     dbms_output.put_line(chr(13));
 24  		     dbms_output.put_line('La inforamcion se ha cargado satisfactoriamente, y se muestra a continuacion...');
 25  		     dbms_output.put_line(chr(13));
 26  		     dbms_output.put_line('Nickname	     Nombre	       Primer apellido	 Segundo apellido');
 27  		     dbms_output.put_line('_______________   _______________   _______________	 ________________');
 28  		     -- se crea un cursor para cargar la informacion ingresada a la tabla jugadores
 29  		     declare
 30  			     cursor jugadores is
 31  			     select
 32  			     nickname,
 33  			     nombre,
 34  			     apellido1,
 35  			     apellido2
 36  			     from jugadores
 37  			     where nickname = apodo;
 38  		     begin
 39  			     for jug in jugadores loop
 40  			     dbms_output.put_line(rpad(jug.nickname, 18, ' ')||rpad(jug.nombre, 18, ' ')||rpad(jug.apellido1, 18, ' ')||rpad(jug.apellido2, 19, ' '));
 41  			     end loop;
 42  		     end;
 43  	     else
 44  		     dbms_output.put_line(chr(13));
 45  		     dbms_output.put_line('El nickname que intenta ingresar ya existe, debe ingresar otro...');
 46  	     end if;
 47  EXCEPTION
 48  	     when VALUE_ERROR then
 49  		     dbms_output.put_line(chr(13));
 50  		     dbms_output.put_line('Excede el numero de caracteres permitidos');
 51  	     when dup_val_on_index then
 52  		     dbms_output.put_line(chr(13));
 53  		     DBMS_OUTPUT.PUT_LINE('Ya existe un jugador con ese nickname: por favor ingrese otro');
 54  	     when NULL_VALUE then
 55  		     dbms_output.put_line(chr(13));
 56  		     DBMS_OUTPUT.PUT_LINE('Solamente el segundo apellido puede ser nulo, por favor ingrese la informacion solicitada ');
 57  	     --when largo_texto then
 58  		     --dbms_output.put_line(chr(13));
 59  		     --DBMS_OUTPUT.PUT_LINE('El texto que intenta ingresar es muy largo, por favor ingrese uno mas corto.');
 60  	     when others then
 61  		     dbms_output.put_line(chr(13));
 62  		     DBMS_OUTPUT.PUT_LINE('Error de Oracle: '||SQLCODE||' - '||SQLERRM );
 63  END;
 64  /
Enter value for nickname: DMV
Enter value for nombre: daniel
Enter value for apellido1: martinez
Enter value for apellido2: vargas

                                                                                         
La inforamcion se ha cargado satisfactoriamente, y se muestra a continuacion...           

                                                                                         
Nickname          Nombre            Primer apellido   Segundo apellido                    
_______________   _______________   _______________   ________________                    
DMV               DANIEL            MARTINEZ          VARGAS                              

PL/SQL procedure successfully completed.

SQL> 
SQL> TODO. resolver el espacio
SP2-0734: unknown command beginning "TODO. reso..." - rest of line ignored.
SQL> spool off
